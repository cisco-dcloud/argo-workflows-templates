apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: terraform
spec:
  entrypoint: update
  arguments:
    parameters:
    - name: terraform-docker-image
      value: "hashicorp/terraform:1.4"
    - name: terraform-script-repository
      value: "https://github.com/cisco-dcloud/argo-workflows-templates.git"
    - name: terraform-script-path
      value: "terraform_examples/random"      
    - name: terraform-secret-name
      value: ""  
    - name: vpn-secret-name
      value: ""

  templates:
    - name: plan
      inputs:
        artifacts:
        - name: terraform
          path: /home/terraform
          git:
            repo: "{{workflow.parameters.terraform-script-repository}}"
            depth: 1
        parameters:
        - name: terraform-script-path
          value: "{{workflow.parameters.terraform-script-path}}" 
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: |
          mkdir /home/current
          cp /home/terraform/{{inputs.parameters.terraform-script-path}}/* /home/current
          cd /home/current
          /bin/terraform init -input=false
          /bin/terraform plan -parallelism=2 -input=false -no-color -out=tfclientsplan >> /tmp/terraform-change.log
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 
      outputs:
        artifacts:
          - name: terraform-folder
            path: /home/current
            archive:
              none: {}
          - name: terraform-log
            path: /tmp/terraform-change.log
            archive:
              none: {}
    - name: apply
      inputs:
        artifacts:
        - name: terraform-folder
          path: /home/current
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: |
          cd /home/current
          chmod 666 tfclientsplan
          chmod 644 *.tf
          chmod 644 .terraform.lock.hcl
          chmod -R 755 .terraform
          /bin/terraform apply -input=false -parallelism=2 -no-color tfclientsplan >> /tmp/terraform-change.log
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 
      outputs:
        artifacts:
          - name: terraform-folder
            path: /home/current
            archive:
              none: {}
          - name: terraform-change-log-with-key
            path: /tmp/terraform-change.log
            s3:
              key: terraform-change-log-with-key
    - name: destroy
      inputs:
        artifacts:
        - name: terraform-folder
          path: /home/current
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: |
          cd /home/current
          chmod 666 tfclientsplan
          chmod 644 *.tf
          chmod 644 .terraform.lock.hcl
          chmod -R 755 .terraform
          /bin/terraform destroy -auto-approve -input=false -parallelism=2 -no-color
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 
    - name: outputs
      inputs:
        artifacts:
        - name: terraform-folder
          path: /home/current
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: |
          cd /home/current
          chmod 666 tfclientsplan
          chmod 644 *.tf
          chmod 644 .terraform.lock.hcl
          chmod -R 755 .terraform
          /bin/terraform output -json > /tmp/tf_outputs.json
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 
      outputs:
        artifacts:
          - name: terraform-outputs
            path: /tmp/tf_outputs.json
            archive:
              none: {}
        parameters:
          - name: terraform-outputs
            valueFrom: 
              path: /tmp/tf_outputs.json
    - name: approve
      suspend: {}
    - name: update
      dag:
        tasks:
          - name: plan
            template: plan
          - name: approve
            dependencies: [plan]
            template: approve
          - name: apply
            template: apply
            dependencies: [plan, approve]
            arguments:
              artifacts:
              - name: terraform-folder
                from: "{{tasks.plan.outputs.artifacts.terraform-folder}}"
    - name: update-auto-approve
      dag:
        tasks:
          - name: plan
            template: plan
          - name: apply
            template: apply
            dependencies: [plan]
            arguments:
              artifacts:
              - name: terraform-folder
                from: "{{tasks.plan.outputs.artifacts.terraform-folder}}"
          - name: outputs
            template: outputs
            dependencies: [apply]
            arguments:
              artifacts:
              - name: terraform-folder
                from: "{{tasks.apply.outputs.artifacts.terraform-folder}}"
          - name: approve
            dependencies: [plan,apply]
            template: approve
          - name: destroy
            template: destroy
            dependencies: [approve]
            arguments:
              artifacts:
              - name: terraform-folder
                from: "{{tasks.apply.outputs.artifacts.terraform-folder}}"

    - name: terraformscript
      inputs:
        artifacts:
        - name: terraform-folder
          path: /home/terraform
        parameters:
        - name: terraform-commands
          value: ""
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: "{{inputs.parameters.terraform-commands}}" 
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 
      sidecars:
      - name: openvpn
        image: mgarciasanes/openconnect
        imagePullPolicy: "Always"
        securityContext:
          privileged: true
        env:
        - name: VPN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.vpn-secret-name}}" 
              key: VPN_PASSWORD 
        - name: VPN_LOGIN
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.vpn-secret-name}}" 
              key: VPN_LOGIN 
        - name: VPN_SERVER
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.vpn-secret-name}}" 
              key: VPN_SERVER 
      outputs:
        artifacts:
          - name: terraform-folder
            path: /home/terraform
            archive:
              none: {}

    - name: terraform-scripts-auto-approve
      dag:
        tasks:
          - name: plan
            template: terraformscript
            arguments:
              artifacts:
              - name: terraform-folder
                git:
                  repo: "{{workflow.parameters.terraform-script-repository}}"
                  depth: 1
              parameters:
              - name: terraform-commands
                value: |
                  cd /home/terraform && ls -la
                  mkdir /tmp/terraform
                  cp /home/terraform/{{workflow.parameters.terraform-script-path}}/* /tmp/terraform
                  rm -fr /home/terraform/ && cp /tmp/terraform /home/terraform
                  cd /home/terraform && ls -la
                  /bin/terraform init -input=false
                  /bin/terraform plan -parallelism=2 -input=false -no-color -out=tfclientsplan
          - name: approve-apply
            dependencies: [plan]
            template: approve
          - name: apply
            template: terraformscript
            dependencies: [approve-apply]
            arguments:
              artifacts:
              - name: terraform-folder
                from: "{{tasks.plan.outputs.artifacts.terraform-folder}}"
              parameters:
              - name: terraform-commands
                value: |
                  cd /home/terraform
                  chmod 666 tfclientsplan
                  chmod 644 *.tf
                  chmod 644 .terraform.lock.hcl
                  chmod -R 755 .terraform
                  /bin/terraform apply -input=false -parallelism=2 -no-color tfclientsplan
          - name: outputs
            template: outputs
            dependencies: [apply]
            arguments:
              artifacts:
              - name: terraform-folder
                from: "{{tasks.apply.outputs.artifacts.terraform-folder}}"
          - name: approve-destroy
            dependencies: [outputs]
            template: approve
          - name: destroy
            template: terraformscript
            dependencies: [approve-destroy]
            arguments:
              artifacts:
              - name: terraform-folder
                from: "{{tasks.apply.outputs.artifacts.terraform-folder}}"
              parameters:
              - name: terraform-commands
                value: |
                  cd /home/terraform
                  chmod 644 *.tf
                  chmod 644 .terraform.lock.hcl
                  chmod -R 755 .terraform
                  /bin/terraform destroy -auto-approve -input=false -parallelism=2 -no-color
