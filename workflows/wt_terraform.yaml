apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: terraform
spec:
  entrypoint: update
  arguments:
    parameters:
    - name: terraform-docker-image
      value: "hashicorp/terraform:1.4"
    - name: terraform-script-repository
      value: "https://github.com/cisco-dcloud/argo-workflows-templates.git"
    - name: terraform-script-path
      value: "terraform_examples/random"      
    - name: terraform-secret-name
      value: ""  

  templates:
    - name: plan
      inputs:
        artifacts:
        - name: terraform
          path: /home/terraform
          git:
            repo: "{{workflow.parameters.terraform-script-repository}}"
            depth: 1
        parameters:
        - name: terraform-script-path
          value: "{{workflow.parameters.terraform-script-path}}" 
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: |
          mkdir /home/current
          cp /home/terraform/{{inputs.parameters.terraform-script-path}}/* /home/current
          cd /home/current
          ls -la
          /bin/terraform init -input=false
          /bin/terraform plan -parallelism=2 -input=false -no-color -out=tfclientsplan >> /tmp/terraform-change.log
          ls -la
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 
      outputs:
        artifacts:
          - name: terraform-plan
            path: /home/current
            archive:
              none: {}
          - name: terraform-log
            path: /tmp/terraform-change.log
            archive:
              none: {}

    - name: apply
      inputs:
        artifacts:
        - name: terraform-plan
          path: /home/current
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: |
          cd /home/current
          whoami
          ls -la
          chmod 666 tfclientsplan
          chmod 644 *.tf
          chmod 644 .terraform.lock.hcl
          chmod -R 755 .terraform
          ls -la
          /bin/terraform apply -input=false -parallelism=2 -no-color tfclientsplan >> /tmp/terraform-change.log
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 
      outputs:
        artifacts:
          - name: terraform-state
            path: /home/current
            archive:
              none: {}
          - name: terraform-change-log-with-key
            path: /tmp/terraform-change.log
            s3:
              key: terraform-change-log-with-key

    - name: destroy
      inputs:
        artifacts:
        - name: terraform-state
          path: /home/current
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: |
          cd /home/current
          ls -la
          chmod 666 tfclientsplan
          chmod 644 *.tf
          chmod 644 .terraform.lock.hcl
          chmod -R 755 .terraform
          ls -la
          /bin/terraform destroy -input=false -parallelism=2 -no-color
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_KEY 
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.terraform-secret-name}}" 
              key: AWS_SECRET 

    - name: approve
      suspend: {}
    - name: update
      dag:
        tasks:
          - name: plan
            template: plan
          - name: approve
            dependencies: [plan]
            template: approve
          - name: apply
            template: apply
            dependencies: [plan, approve]
            arguments:
              artifacts:
              - name: terraform-plan
                from: "{{tasks.plan.outputs.artifacts.terraform-plan}}"
    - name: update-auto-approve
      dag:
        tasks:
          - name: plan
            template: plan
          - name: apply
            template: apply
            dependencies: [plan]
            arguments:
              artifacts:
              - name: terraform-plan
                from: "{{tasks.plan.outputs.artifacts.terraform-plan}}"
          - name: approve
            dependencies: [plan,apply]
            template: approve
          - name: destroy
            template: destroy
            dependencies: [approve]
            arguments:
              artifacts:
              - name: terraform-state
                from: "{{tasks.apply.outputs.artifacts.terraform-state}}"