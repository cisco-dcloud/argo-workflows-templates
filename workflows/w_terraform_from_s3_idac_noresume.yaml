apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: idac-tf-
spec:
  podGC:
    # Pod GC strategy must be one of the following:
    # * OnPodCompletion - delete pods immediately when pod is completed (including errors/failures)
    # * OnPodSuccess - delete pods immediately when pod is successful
    # * OnWorkflowCompletion - delete pods when workflow is completed
    # * OnWorkflowSuccess - delete pods when workflow is successful
    # Default: do not delete pods
    strategy: OnPodCompletion
    # The duration before pods in the GC queue get deleted. Defaults to 5s
    deleteDelayDuration: 86400s

  ttlStrategy:
    #The TTLStrategy sets the strategy for how long workflows that are
    # successful, not successful, or completed should live.
    secondsAfterCompletion: 3600  # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    secondsAfterSuccess: 3600     # Time to live after workflow is successful
    secondsAfterFailure: 86400   # Time to live after workflow fails
  entrypoint: main
  serviceAccountName: "argo-workflow"
  arguments:
    parameters:
    - name: terraform-docker-image
      value: "hashicorp/terraform:1.4" 
    - name: terraform-variables-user
      value: ""
    - name: terraform-variables-admin
      value: ""   
    - name: terraform-parallelism
      value: "2"      
    - name: terraform-debug-level
      value: "ERROR"                          #TRACE, DEBUG, INFO, WARN or ERROR 
    - name: terraform-action
      value: "apply"                          #apply, destroy 
    - name: artifact-gc-policy
      value: "OnWorkflowDeletion"             #Never, OnWorkflowDeletion, OnWorkflowCompletion 
    - name: terraform-files-s3-bucket
    - name: terraform-files-s3-key

  templates:
    - name: terraformscript
      inputs:
        artifacts:
        - name: terraform-folder
          path: /home/terraform
        parameters:
        - name: terraform-commands
          value: ""
      metadata:
        labels:
          idac_request: "{{workflow.labels.idac_request}}"   #The workflow label is appended by iDAC 
      script:
        imagePullPolicy: "IfNotPresent"
        image: "{{workflow.parameters.terraform-docker-image}}"
        command: ["sh"]
        source: "{{inputs.parameters.terraform-commands}}" 
        env:
        - name: AWS_ACCESS_KEY_ID      # name of env var
          valueFrom:
            secretKeyRef:
              name: aws-credentials           # name of k8s secret
              key: AWS_ACCESS_KEY_ID          # 'key' subcomponent of the secret
        - name: AWS_SECRET_ACCESS_KEY  
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_SECRET_ACCESS_KEY    
        - name: AWS_DEFAULT_REGION  
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_DEFAULT_REGION 
      outputs:
        parameters:
          - name: terraform-outputs
            valueFrom: 
              path: /tmp/tf_outputs.json
            globalName: terraform-outputs
        artifacts:
          - name: terraform-folder
            path: /home/terraform
            archive:
              none: {}
            s3:
              key: "{{workflow.parameters.terraform-files-s3-key}}"
            artifactGC:
              strategy: "{{workflow.parameters.artifact-gc-policy}}"
              serviceAccountName: "argo-workflows"
    - name: main
      steps:
        - - name: init-plan-apply
            template: terraformscript
            when: "{{workflow.parameters.terraform-action}} == 'apply'"
            arguments:
              artifacts:
              - name: terraform-folder
                s3:
                  endpoint: s3.amazonaws.com
                  bucket: "{{workflow.parameters.terraform-files-s3-bucket}}"
                  key: "{{workflow.parameters.terraform-files-s3-key}}"
              parameters:
              - name: terraform-commands
                value: |
                  cat <<-EOF > /home/terraform/terraform_user.tfvars
                  {{workflow.parameters.terraform-variables-user}}
                  EOF
                  cat <<-EOF > /home/terraform/terraform_admin.tfvars
                  {{workflow.parameters.terraform-variables-admin}}
                  EOF
                  cd /home/terraform/
                  export TF_LOG="{{workflow.parameters.terraform-debug-level}}"
                  export TF_LOG_PATH="/home/terraform/tf_{{workflow.parameters.terraform-action}}.log"
                  /bin/terraform init -input=false && /bin/terraform plan -parallelism={{workflow.parameters.terraform-parallelism}} -var-file="terraform_user.tfvars" -var-file="terraform_admin.tfvars" -input=false -no-color -out=tfclientsplan && /bin/terraform apply -input=false -parallelism={{workflow.parameters.terraform-parallelism}} -no-color tfclientsplan && /bin/terraform output -json > /tmp/tf_outputs.json && exit 0
                  exit 1
              - name: terraform-variables-user
                value: "{{workflow.parameters.terraform-variables-user}}"
              - name: terraform-variables-admin
                value: "{{workflow.parameters.terraform-variables-admin}}"
        - - name: destroy
            template: terraformscript
            when: "{{workflow.parameters.terraform-action}} == 'destroy'"
            arguments:
              artifacts:
              - name: terraform-folder
                s3:
                  endpoint: s3.amazonaws.com
                  bucket: "{{workflow.parameters.terraform-files-s3-bucket}}"
                  key: "{{workflow.parameters.terraform-files-s3-key}}"
              parameters:
              - name: terraform-commands
                value: |
                  cd /home/terraform/
                  chmod 644 *.tf
                  chmod 644 .terraform.lock.hcl
                  chmod -R 755 .terraform
                  export TF_LOG="{{workflow.parameters.terraform-debug-level}}"
                  export TF_LOG_PATH="/home/terraform/tf_{{workflow.parameters.terraform-action}}.log"
                  /bin/terraform destroy -auto-approve -input=false -parallelism={{workflow.parameters.terraform-parallelism}} -no-color -var-file="terraform_user.tfvars" -var-file="terraform_admin.tfvars" && /bin/terraform output -json > /tmp/tf_outputs.json && exit 0
                  exit 1